// This class was evolved from a file that is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Fraction/Fraction.jack

// Extended and Modified by Shira Joseph

/**
* Represents the Fraction type and related operations.
*/
class Fraction {
	field int numerator, denominator;
	field boolean pos;
	static Int calc1, calc2, calc3, calc4, calc5, calc6, calc7;

	/** Constructs a (reduced) fraction from the given numerator and denominator. */
	constructor Fraction new(Int x, Int y) {
		do set(x, y);
		return this;
	}

	/** Initializes static variables */
	function void init(){
		let calc1 = Int.new(true, 1);
		let calc2 = Int.new(true, 1);
		let calc3 = Int.new(true, 1);
		let calc4 = Int.new(true, 1);
		let calc5 = Int.new(true, 1);
		let calc6 = Int.new(true, 1);
		let calc7 = Int.new(true, 1);
		return;
	}

	/** Disposes static variables */
	function void deInit() {
		do calc1.dispose();
		do calc2.dispose();
		do calc3.dispose();
		do calc4.dispose();
		do calc5.dispose();
		do calc6.dispose();
		do calc7.dispose();
		return;
	}

	/** Reduces this fraction. */
	method void reduce() {
		var int g;
		let g = Fraction.gcd(numerator, denominator);
		if (g > 1) {
			 let numerator = numerator / g;
			 let denominator = denominator / g;
		}
		return;
	}

	/** Accessors. */
	method int numerator(){ return numerator; }
	method int denominator(){ return denominator; }
	method boolean pos(){ return pos; }
	method void set(Int n, Int d){
		let numerator = n.num();
		let denominator = d.num();
		if (n.pos() = d.pos()){
			let pos = true;
		} else {
			let pos = false;
		}
		if (d.num() = 0) {
			let numerator = 0;
			let denominator = 1;
			let pos = true;
		}
		if (n.num() = 0) {
			let denominator = 1;
			let pos = true;
		} else {
			do reduce();
		}
		return;
	}
	method void setPos(boolean value){
		let pos = value;
		return;
	}

	/** Adds this fraction and another */
	method void plus(Fraction other, Fraction result) {
		// TODO: check that each of these operations won't exceed 32767
		do calc1.set(pos, numerator);
		do calc2.set(true, other.denominator());
		do Int.multiply(calc1, calc2, calc3);
		do calc4.set(other.pos(), other.numerator());
		do calc5.set(true, denominator);
		do Int.multiply(calc4, calc5, calc6);
		do calc7.set(true, denominator * other.denominator());
		do result.set(calc3.plus(calc6), calc7);
		return;
	}

	/** Subtracts this fraction from another */
	method void minus(Fraction other, Fraction result) {
		// TODO: check that each of these operations won't exceed 32767
		do calc1.set(pos, numerator);
		do calc2.set(true, other.denominator());
		do Int.multiply(calc1, calc2, calc3);
		do calc4.set(other.pos(), other.numerator());
		do calc5.set(true, denominator);
		do Int.multiply(calc4, calc5, calc6);
		do calc7.set(true, denominator * other.denominator());
		do result.set(calc3.minus(calc6), calc7);
		return;
	}

	/** Multiplies two fractions */
	method void times(Fraction other, Fraction result) {
		// TODO: check that each of these operations won't exceed 32767
		do calc1.set(pos(), numerator());
		do calc2.set(true, denominator());
		do calc3.set(other.pos(), other.numerator());
		do Int.multiply(calc1, calc3, calc4);
		do calc5.set(true, other.denominator());
		do Int.multiply(calc2, calc5, calc6);
		do result.set(calc4, calc6);
		return;
	}

	/** Divides one fraction by another */
	method void dividedBy(Fraction divisor, Fraction result) {
		// TODO: check that each of these operations won't exceed 32767
		do calc1.set(true, divisor.denominator());
		do calc2.set(divisor.pos(), divisor.numerator());
		do calc3.set(pos, numerator);
		do calc4.set(true, denominator);
		do result.set(calc1.times(Int.new(pos, numerator)), calc2.times(Int.new(true, denominator)));
		return;
	}

	/** Turns a string into a Fraction. Accepts these formats: x, -x, x/y, -x/y, x/-y, -x/-y */
	function Fraction toFraction (String num) {
		var int slash, n, d, start, end, negative, negative2;
		var Int nInt, dInt;
		var String nS, dS, num2, num3;
		var char fChar, bChar, negChar;
		var Fraction frac;
		var boolean numerPos, denomPos;

		let numerPos = true;
		let denomPos = true;
		let negChar = 45;
		let fChar = 47;

		let negative = S.indexOf(num, negChar);
		if (negative = 0) {
			let numerPos = false;
			let num2 = num;
			let num = S.substr(num2, 1, num2.length());
		}
		let slash = S.indexOf(num, fChar);
		if (slash = -1) {
			let n = num.intValue();
			let nInt = Int.new(numerPos, n);
			let dInt = Int.new(true, 1);
			let frac = Fraction.new(nInt, dInt);
			return frac;
		}
		let nS = S.substr(num, 0, slash);
		let start = slash + 1;
		let end = String.length(num);
		let dS = S.substr(num, start, end);
		let negative2 = S.indexOf(dS, negChar);
		if (negative2 = 0) {
			let denomPos = false;
			let dS = S.substr(dS, 1, dS.length());
		}
		let n = nS.intValue();
		let d = dS.intValue();
		let frac = Fraction.new(Int.new(numerPos, n), Int.new(denomPos, d));
		return frac;
	}

	method String toString(){
		var String appended, n, d, sign;
		if (numerator = 0){
			return "0";
		}
		if (pos) {
			let sign = "";
		} else {
			let sign = "-";
		}
		let n = String.new(6);
		let d = String.new(6);

		do n.setInt(numerator);
		do d.setInt(denominator);
		if (denominator = 1){
			if (~(numerator = 1)) {
				let appended = S.append(sign, n);
			} else {
				let appended = S.append(sign, "1");
			}
		} else {
			let appended = S.append4(sign, n, "/", d);
		}
		do Memory.deAlloc(n);
		do Memory.deAlloc(d);
		do Memory.deAlloc(sign);
		return appended;
	}

	method int toInt() {
		var int a;
		if (numerator = 0){
			return 0;
		}
		let a = numerator/denominator;
		return a;
	}

	method String toDecimal (int places) {
		var int numLength, remainder, i, dividend, decIndex, j, digit;
		var String numString, answer, c, dividendString;

		if (numerator = 0 | denominator = 0){
			return "0";
		}

		let numString = String.new(12);
		let dividendString = String.new(12);
		let answer = String.new(12);
		let remainder = 0;
		let dividend = 0;
		do numString.setInt(numerator);
		let numLength = numString.length();

		let i = 0;
		while (i < (numLength + places)) {
			if (i < numLength) {
				let c = S.substr(numString, i, i + 1);
				let digit = c.intValue();
			} else {
				let digit = 0;
			}

			if (i = numLength) {
				let answer = S.append(answer, ".");
			}
			let dividend = (digit + (remainder * 10)) / denominator;
			do dividendString.setInt(dividend);
			let answer = S.append(answer, dividendString);
			let remainder = digit + (remainder * 10) - (dividend * denominator);
			let i = i + 1;
		}

		let decIndex = S.indexOf(answer, 46);
		let j = 0;
		while (j < (decIndex - 1)) {
			let c = S.substr(answer, 0, 1);
			if (S.equals(c, "0") = true) {
				let answer = S.substr(answer, 1, answer.length());
				let j = j + 1;
			} else {
				let j = decIndex;
			}
		}
		if (~pos()){
			let answer = S.append("-", answer);
		}
		return answer;
	}

	method void checkValid() {
		if(denominator > 9999 | denominator < -9999 | numerator > 9999 | numerator < -9999){
			do Out.ln("Invalid fraction");
		}
		return;
	}

	method boolean isGreaterThan(Fraction f2) {
		if (pos = f2.pos()){
			if (equals(f2)){
				return false;
			}
			if ((pos & ((numerator * f2.denominator()) < (f2.numerator() * denominator))) | (~pos & ((numerator * f2.denominator()) > (f2.numerator() * denominator)))){
				return false;
			}
			return true;
		}
		return pos;
	}

	method boolean isLessThan(Fraction f2) {
		if (~(isGreaterThan(f2) | equals(f2))){
			return true;
		}
		return false;
	}

	method boolean equals(Fraction f2) {
		if ((numerator = 0) & (f2.numerator() = 0)){
			return true;
		}
		if ((numerator = f2.numerator()) & (denominator = f2.denominator()) & (pos = f2.pos())){
			return true;
		}
		return false;
	}

	/** Disposes this fraction. */
	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	/** Computes the greatest common divisor of the given integers. */
	function int gcd(int a, int b) {
		var int r;
		while (~(b = 0)) { // applies Euclid's algorithm
			 let r = a - (b * (a / b)); // r = remainder of the integer division a/b
			 let a = b;
			 let b = r;
		}
		return a;
	}
}
