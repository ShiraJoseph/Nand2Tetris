/**
*	Handles points in an equation
*/
class Point {
	field Int x, y;
	field boolean isCoord;
	static Coord coord;
	static Int xCoord, yCoord;

	/** Constructs a point on the cartesian plane */
	constructor Point new(Int xVal, Int yVal){
		let x = xVal;
		let y = yVal;
		return this;
	}

	/** Initializes static variables */
	function void init() {
		let coord = Coord.new(1, 1);
		let xCoord = Int.new(true, 1);
		let yCoord = Int.new(true, 1);
		return;
	}

	/** Disposes static variables */
	function void deInit() {
		do coord.dispose();
		do xCoord.dispose();
		do yCoord.dispose();
		return;
	}

	/** Accessors. */
	method Int x(){ return x; }
	method Int y(){ return y; }
	method Int coord(){ return coord; }
	method void setX(Int val){
		let x = val;
		return;
	}
	method void setY(Int val){
		let y = val;
		return;
	}

	/**
	 * Takes an x,y point on the cartesian plane and converts it into Hack screen coordinates.
	 * The center of the screen is considered the origin.
	 * Example: the point (1, 1) would be drawn at (256, 126) on the Hack Screen
	 */
	method Coord toCoord(){
		if (isValidPoint()){
			let xCoord = x.plus(Const.i255());
			do coord.setX(xCoord.num());
			let y = y.times(Const.iNeg1());
			let yCoord = y.plus(Const.i127());
			do coord.setY(yCoord.num());
		} else {
			do Out.s("Invalid Point ");
			do Out.ln(toString());
			do Sys.halt();
		}
		return coord;
	}

	method boolean isValidPoint() {
		if (
			x.isLessThan(Const.i256()) &
			x.isGreaterThan(Const.iNeg256()) &
			y.isLessThan(Const.i128()) &
			y.isGreaterThan(Const.iNeg128())
		){
			return true;
		}
		return false;
	}

	method String toString() {
		var String xS, yS, sS;
		let xS = x.toString();
		let yS = y.toString();
		let sS = S.append5("(", xS, ", ", yS, ")");
		return sS;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}
}
